name: Build Client-Ready PDF (On-Demand)

on:
  workflow_dispatch:
    inputs:
      source_file:
        description: 'Path to the .md file to convert (e.g., docs/architecture/technical-architecture.md)'
        required: true
        default: 'docs/ai_readiness_assessment/20251007_process_mapping.md'

jobs:
  build-document:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Prepare output filename
      - name: Set output filename
        id: set_filename
        run: |
          FILENAME=$(basename "${{ github.event.inputs.source_file }}" .md)
          echo "pdf_name=${FILENAME}.pdf" >> $GITHUB_OUTPUT

      # 3. Check if file contains mermaid diagrams
      - name: Check for Mermaid Diagrams
        id: check_mermaid
        run: |
          if grep -q '```mermaid' "${{ github.event.inputs.source_file }}"; then
            echo "has_mermaid=true" >> $GITHUB_OUTPUT
          else
            echo "has_mermaid=false" >> $GITHUB_OUTPUT
          fi

      # 4. Install mermaid-cli for diagram rendering
      - name: Install Mermaid CLI
        if: steps.check_mermaid.outputs.has_mermaid == 'true'
        run: npm install -g @mermaid-js/mermaid-cli

      # 5. Render Mermaid diagrams (only if they exist)
      - name: Render Mermaid Diagrams
        if: steps.check_mermaid.outputs.has_mermaid == 'true'
        run: |
          mkdir -p docs/rendered
          BASENAME=$(basename "${{ github.event.inputs.source_file }}" .md)

          # Extract mermaid blocks and render them
          python3 << 'EOF'
          import re
          import subprocess
          import os

          # Read the markdown file
          with open('${{ github.event.inputs.source_file }}', 'r') as f:
              content = f.read()

          # Find all mermaid blocks
          pattern = r'```mermaid\n(.*?)\n```'
          matches = re.finditer(pattern, content, re.DOTALL)

          basename = os.environ['BASENAME']
          counter = 1

          for match in matches:
              mermaid_code = match.group(1)
              mmd_file = f'temp_{counter}.mmd'
              svg_file = f'docs/rendered/{basename}-{counter}.svg'

              # Write mermaid code to temp file
              with open(mmd_file, 'w') as f:
                  f.write(mermaid_code)

              # Render to SVG (with --no-sandbox for GitHub Actions)
              subprocess.run(['mmdc', '-i', mmd_file, '-o', svg_file, '-b', 'transparent', '--puppeteerConfig', '{"args":["--no-sandbox"]}'])

              # Clean up temp file
              os.remove(mmd_file)
              counter += 1
          EOF
        env:
          BASENAME: ${{ steps.set_filename.outputs.pdf_name }}

      # 6. Process markdown file to replace mermaid blocks with SVG references
      - name: Replace Mermaid with SVG References
        if: steps.check_mermaid.outputs.has_mermaid == 'true'
        run: |
          # Create a copy of the original file for processing
          cp "${{ github.event.inputs.source_file }}" processed_markdown.md

          # Extract filename without path and extension
          BASENAME=$(basename "${{ github.event.inputs.source_file }}" .md)

          # Replace mermaid code blocks with SVG references
          python3 << 'EOF'
          import re
          import os

          def replace_mermaid_blocks(content, basename):
              # Find all mermaid blocks and replace with SVG references
              def replace_block(match):
                  block_num = replace_block.counter
                  replace_block.counter += 1
                  svg_path = f"docs/rendered/{basename}-{block_num}.svg"
                  return f"![Mermaid Diagram]({svg_path})"

              replace_block.counter = 1
              # Replace mermaid blocks with SVG references
              pattern = r'```mermaid\n.*?\n```'
              result = re.sub(pattern, replace_block, content, flags=re.DOTALL)
              return result

          # Read the file
          with open('processed_markdown.md', 'r') as f:
              content = f.read()

          # Process the content
          basename = os.environ['BASENAME'].replace('.pdf', '')
          processed_content = replace_mermaid_blocks(content, basename)

          # Write back to file
          with open('processed_markdown.md', 'w') as f:
              f.write(processed_content)
          EOF
        env:
          BASENAME: ${{ steps.set_filename.outputs.pdf_name }}
      
      # 7. Set up the Python environment to make 'pip' available
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 8. Install the WeasyPrint PDF engine and its dependencies
      - name: Install PDF Engine
        run: |
          sudo apt-get update
          sudo apt-get install -y libpango-1.0-0 libpangoft2-1.0-0
          pip install weasyprint

      # 9. Determine source file for PDF conversion
      - name: Set source file for PDF
        id: set_source
        run: |
          if [ "${{ steps.check_mermaid.outputs.has_mermaid }}" == "true" ]; then
            echo "source_file=processed_markdown.md" >> $GITHUB_OUTPUT
          else
            echo "source_file=${{ github.event.inputs.source_file }}" >> $GITHUB_OUTPUT
          fi

      # 10. Install Pandoc
      - name: Install Pandoc
        run: |
          sudo apt-get install -y pandoc

      # 11. Convert the Markdown file to a styled PDF
      - name: Build PDF from Markdown
        run: |
          pandoc \
            --from=markdown \
            --to=pdf \
            --pdf-engine=weasyprint \
            --css=.github/styles.css \
            --output=${{ steps.set_filename.outputs.pdf_name }} \
            ${{ steps.set_source.outputs.source_file }}

      # 12. Upload the generated PDF as an artifact
      - name: Upload PDF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_filename.outputs.pdf_name }}
          path: ${{ steps.set_filename.outputs.pdf_name }}